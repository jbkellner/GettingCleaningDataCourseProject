tidydataAverageByActivitySubject<-matrix(NA,length(tidydatasplitMeanStd),ncol(tidydataMeanStd))
for(i in 1:length(tidydatasplitMeanStd)){
temp<-tidydatasplit[[i]]
tidydataAverageByActivitySubject[i,]<-c(temp[1,1],temp[1,2],sapply(temp[,3:ncol(temt)],mean))
}
tidydataAverageByActivitySubject<-matrix(NA,length(tidydatasplitMeanStd),ncol(tidydataMeanStd))
for(i in 1:length(tidydatasplitMeanStd)){
temp<-tidydatasplitMeanStd[[i]]
tidydataAverageByActivitySubject[i,]<-c(temp[1,1],temp[1,2],sapply(temp[,3:ncol(temt)],mean))
}
rmtidydatasplitMeanStd,tidydataAverageByActivitySubject,temp)
rm(tidydatasplitMeanStd,tidydataAverageByActivitySubject,temp)
tidydatasplitMeanStd<-split(tidydataMeanStd,list(tidydataMeanStd$subject,tidydataMeanStd$activity))
tidydataAverageByActivitySubject<-matrix(NA,length(tidydatasplitMeanStd),ncol(tidydataMeanStd))
tidydatasplitMeanStd<-split(tidydataMeanStd,list(tidydataMeanStd$subject,tidydataMeanStd$activity))
tidydataAverageByActivitySubject<-matrix(NA,length(tidydatasplitMeanStd),ncol(tidydataMeanStd))
for(i in 1:length(tidydatasplitMeanStd)){
temp<-tidydatasplitMeanStd[[i]]
tidydataAverageByActivitySubject[i,]<-c(temp[1,1],temp[1,2],sapply(temp[,3:ncol(temt)],mean))
}
tidydatasplitMeanStd<-split(tidydataMeanStd,list(tidydataMeanStd$subject,tidydataMeanStd$activity))
tidydataAverageByActivitySubject<-matrix(NA,length(tidydatasplitMeanStd),ncol(tidydataMeanStd))
for(i in 1:length(tidydatasplitMeanStd)){
temp<-tidydatasplitMeanStd[[i]]
tidydataAverageByActivitySubject[i,]<-c(temp[1,1],temp[1,2],sapply(temp[,3:ncol(temt)],mean))
}
tidydataAverageByActivitySubject<-matrix(NA,length(tidydatasplitMeanStd),ncol(tidydataMeanStd))
for(i in 1:length(tidydatasplitMeanStd)){
temp<-tidydatasplitMeanStd[[i]]
tidydataAverageByActivitySubject[i,]<-c(temp[1,1],temp[1,2],sapply(temp[,3:ncol(temp)],mean))
}
View(tidydataAverageByActivitySubject)
names(tidydataAverageByActivitySubject)<-names(tidydataMeanStd)
View(tidydataAverageByActivitySubject)
names(tidydataMeanStd)
names(tidydataAverageByActivitySubject)<-names(tidydataMeanStd)
View(tidydataAverageByActivitySubject)
View(tidydataAverageByActivitySubject)
class(tidydataAverageByActivitySubject)
class(features)
tidydataAverageByActivitySubject<-as.data.frame(tidydataAverageByActivitySubject)
names(tidydataAverageByActivitySubject)<-names(tidydataMeanStd)
View(tidydataAverageByActivitySubject)
View(tidydataAverageByActivitySubject)
tidydataAverageByActivitySubject<-as.data.frame(tidydataAverageByActivitySubject)
names(tidydataAverageByActivitySubject)<-names(tidydataMeanStd)
tidydataAverageByActivitySubject$activity<-factor(tidydataAverageByActivitySubject$activity,levels=activitylabels[,1],labels=activitylabels[,2])
View(tidydataAverageByActivitySubject)
if(!file.exists(UCI HAR Dataset)){stop(The data folder UCI HAR Dataset is missing.)}
if(file.exists()){print(good job!)}
if(!file.exists("UCI HAR Dataset")){stop(The data folder UCI HAR Dataset is missing.)}
if(!file.exists("UCI HAR Dataset"))
?stop
?stop
if(!file.exists("UCI HAR Dataset")){stop("The data folder UCI HAR Dataset is missing.")}
if(file.exists("UCI HAR Dataset")){print(good job!)}
if(file.exists("UCI HAR Dataset")){print("good job!")}
# should add some lines of code here to check for UCI HAR Dataset
# if it is missing
if(!file.exists("UCI HAR Dataset")){stop("The data folder UCI HAR Dataset is missing.")} else
print("The data folder UCI HAR Dataset was located, construction of a tidy dataset will continue.")
setwd("~/Dropbox/R/3GettingCleaningData/CourseProject")
# Check that the data folder exists and set as the working directory, stop if it is missing
if(!file.exists("UCI HAR Dataset")){stop("The data folder UCI HAR Dataset is missing.")} else
{
print("The data folder UCI HAR Dataset was located, construction of a tidy dataset will proceed.")
setwd("UCI HAR Dataset")
}
getwd
featuresmeanall<-grep("-mean()",features[,2]) # features that calculate the mean
featuresmeanall<-grep("mean()",features[,2]) # features that calculate the mean
featuresmeanFreq<-grep("meanFreq",features[,2]) # features that calculate the meanFreq
featuresstd<-grep("-std()",features[,2]) # features that calculate the std
featuresstd<-grep("std()",features[,2]) # features that calculate the std
featuresmeanstd<-sort(c(featuresmean,featuresstd)) # combine mean and std into one list
featuresmeanall<-grep("mean()",features[,2]) # features that calculate the mean
featuresmeanFreq<-grep("meanFreq",features[,2]) # features that calculate the meanFreq
featuresmean<-as.numeric(row.names(table(featuresmeanall,exclude=featuresmeanFreq))) # remove meanFreq features
featuresstd<-grep("std()",features[,2]) # features that calculate the std
featuresmeanstd<-sort(c(featuresmean,featuresstd)) # combine mean and std into one list
featuresmeanall<-grep("mean()",features[,2]) # features that calculate the mean
featuresmeanFreq<-grep("meanFreq",features[,2]) # features that calculate the meanFreq
featuresmean<-as.numeric(row.names(table(featuresmeanall,exclude=featuresmeanFreq))) # remove meanFreq features
featuresstd<-grep("std()",features[,2]) # features that calculate the std
featuresmeanstd<-sort(c(featuresmean,featuresstd)) # combine mean and std into one list
rm(featuresmeanall,featuresmeanFreq,featuresmean,featuresstd)
View(activitylabels)
activitylabels[,2]<-lower(activitylabels[,2])
?lower
?tolower
activitylabels[,2]<-tolower(activitylabels[,2])
View(activitylabels)
View(features)
?grep
features<-read.table("features.txt")
grep("-","_",features)
grep("-","_",features)
View(features)
grep("-","_",features[,2])
features[,2]
View(features)
grep("-","_",features[,2])
grep("-",features[,2])
View(features)
grep("-","_",features[,2])
grep("-","",features[,2])
grep("-","",features[,2])
grep("-",features[,2])
gsub("-","_",features[,2])
features[,2]<-gsub("-","_",features[,2])
features[,2]<-gsub(",","",features[,2])
features[,2]<-gsub("(","",features[,2])
features[,2]<-gsub("()","",features[,2])
features
View(features)
features[,2]<-gsub("\\(","",features[,2])
features[,2]<-gsub("\\(","",features[,2])
View(features)
features[,2]<-gsub("\\)","",features[,2])
View(features)
View(activitylabels)
View(features)
View(features)
View(activitylabels)
View(features)
View(tidydataAverageByActivitySubject)
features[,2]<-tolower(features[,2])
View(features)
?downlaod
?download
url<-https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip
download.file(fileUrl,destfile="",method="curl"
url<-"https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(url,destfile="",method="curl")
url<-"https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(url,destfile="Dataset.zip",method="curl")
unzip("*.zip")
unzip("getdata_projectfiles_UCI HAR Dataset.zip")
?unzip
unzip(*.zip)
unzip("getdata_projectfiles_UCI HAR Dataset.zip")
unzip("getdata_projectfiles_UCI HAR Dataset")
unzip("getdata-projectfiles_UCI HAR Dataset.zip")
unzip("getdata-projectfiles-UCI HAR Dataset.zip",list=TRUE)
url<-"https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
print("The data folder UCI HAR Dataset is missing, it can be downloaded from the web at ",url)
View(tidydata)
as.numeric(tidy.data)
as.numeric(tidydata)
url<-"https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
print("paste(The data folder UCI HAR Dataset is missing, it can be downloaded from the web at ",url,sep="")
url<-"https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
print("The data folder UCI HAR Dataset is missing, it can be downloaded from the web at")
print(url)
print("The data folder UCI HAR Dataset is missing, it can be downloaded from the web at")
print(url)
rm(url)
url<-"https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
print(The data folder UCI HAR Dataset is missing, it can be downloaded from the web at)
print(url)
print("The data folder UCI HAR Dataset is missing, it can be downloaded from the web at")
print(url)
print("The data folder UCI HAR Dataset was located, construction of a tidy dataset will proceed.")
unzip("as.character(getdata-projectfiles-UCI HAR Dataset.zip)",list=TRUE)
as.character(getdata-projectfiles-UCI HAR Dataset.zip)
?melt
?decat
?dcat
detach("package:methods", unload=TRUE)
detach("package:stats", unload=TRUE)
detach("package:utils", unload=TRUE)
detach("package:datasets", unload=TRUE)
# Title: Course Project for Coursera Getting and Cleaning Data
# Brief description:
# Author: jbkellner
# Date created: May 14, 2014
# Last modified: May 14, 2014
# Dependencies: This script assumes the data to be processed is in a folder
# called UCI HAR Dataset located in the current working directory
# if the folder is missing, it will be downloaded from the web.
library(utils)
# stats datasets
# STEP 1: Read in the focal data into the R global environment
# Check that the data folder exists and set as the working directory, stop if it is missing
if(!file.exists("UCI HAR Dataset")){
url<-"https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
print("The data folder UCI HAR Dataset is missing, it can be downloaded from the web at:")
print(url)
rm(url)
#download.file(url,destfile="Dataset.zip",method="curl")
#unzip("as.character(getdata-projectfiles-UCI HAR Dataset.zip)",list=TRUE)
} else
{
print("The data folder UCI HAR Dataset was located, construction of a tidy dataset will proceed.")
setwd("UCI HAR Dataset")
}
# activity_labels link the class labels with their activity name
activitylabels<-read.table("activity_labels.txt")
activitylabels<-as.matrix(activitylabels)
activitylabels[,1]<-as.numeric(activitylabels[,1])
activitylabels[,2]<-tolower(activitylabels[,2])
# features.txt is a list of all features
# remove characters such as minus(replace with understore), comma, periods, parentheses
features<-read.table("features.txt")
features[,2]<-gsub("-","_",features[,2])
features[,2]<-gsub(",","",features[,2])
features[,2]<-gsub("\\(","",features[,2])
features[,2]<-gsub("\\)","",features[,2])
features[,2]<-gsub(".","_",features[,2])
features[,2]<-tolower(features[,2])
# Import data from both the test and train sets
# data for 30% of the volunteers is in the test folder
# data for 70% of the volunteers is in the train folder
# subject: each row identifies the subject who performed the activity
# from each window sample, ranges from 1:30
testsubject<-read.table("test/subject_test.txt")
trainsubject<-read.table("train/subject_train.txt")
# X is a 561-feature vector with time and frequency domain variables
testx<-read.table("test/X_test.txt")
trainx<-read.table("train/X_train.txt")
# y: the activity label for x
testy<-read.table("test/y_test.txt")
trainy<-read.table("train/y_train.txt")
# Return to the main directory
setwd("..")
# STEP 2: Merge the files from the test and train sets
# and make a master data.frame called tidydata
# export tidydata as a text file called tidydata.txt
# subject, identifies the subject who performed the activity
subject<-rbind(testsubject,trainsubject)
names(subject)<-"subject"
# x, a 561-feature vector with time and frequency domain variables
x<-rbind(testx,trainx)
names(x)<-features[,2] # get the column names from the feature file
# y, activity label for x
y<-rbind(testy,trainy)
names(y)<-"activity"
y$activity<-factor(y$activity,levels=activitylabels[,1],labels=activitylabels[,2])
# remove combined files
rm(testsubject,trainsubject)
rm(testx,trainx)
rm(testy,trainy)
# Create a master tidy data set called tidy data
# and export this as a tab delimited file called tidydata.txt
tidydata<-cbind(subject,y,x)
write.table(tidydata,"tidydata.txt",sep="\t")
rm(x,y,subject,activitylabels)
# STEP 3: Extract only the mean and standard deviation of the measurements
# There are a total of 17 measurements in the features file
# that have been described using numerous statistics.
# We are interested in extracting the mean and standard deviation of these measurements
# described as mean() and std()
featuresmeanall<-grep("_mean",features[,2]) # features that calculate the mean
featuresmeanFreq<-grep("_meanFreq",features[,2]) # features that calculate the meanFreq
featuresmean<-as.numeric(row.names(table(featuresmeanall,exclude=featuresmeanFreq))) # remove meanFreq features
featuresstd<-grep("_std",features[,2]) # features that calculate the std
featuresmeanstd<-sort(c(featuresmean,featuresstd)) # combine mean and std into one list
rm(featuresmeanall,featuresmeanFreq,featuresmean,featuresstd)
tidydataMeanStd<-tidydata[,c(1:2,(2+featuresmeanstd))] # 2 is added as the measurements started in column 3
write.table(tidydataMeanStd,"tidydataMeanStd.txt",sep="\t")
# STEP 4: Calculate the average of each variable for each activity and each subject
tidydatasplitMeanStd<-split(tidydataMeanStd,list(tidydataMeanStd$subject,tidydataMeanStd$activity))
tidydataAverageByActivitySubject<-matrix(NA,length(tidydatasplitMeanStd),ncol(tidydataMeanStd))
for(i in 1:length(tidydatasplitMeanStd)){
temp<-tidydatasplitMeanStd[[i]]
tidydataAverageByActivitySubject[i,]<-c(temp[1,1],temp[1,2],sapply(temp[,3:ncol(temp)],mean))
}
tidydataAverageByActivitySubject<-as.data.frame(tidydataAverageByActivitySubject)
names(tidydataAverageByActivitySubject)<-names(tidydataMeanStd)
tidydataAverageByActivitySubject$activity<-factor(tidydataAverageByActivitySubject$activity,levels=activitylabels[,1],labels=activitylabels[,2])
rm(tidydatasplitMeanStd,temp)
# In the previous run of the course, students have generally ignored the "Inertial Signals" folder.
# It seemed to be an acceptable choice in the case it was documented appropriately.
# Documenting the steps you are following is an important aspect of this project.
#
#
# setwd("test/Inertial Signals")
# # inertial signals folder
# # The files in this folder include the triaxial acceleration from the
# # accerlerometer (total acceleration) and the estimated body acceleration
# # in addition to the triaxial angular velocity from the gyroscope.
#
# # 'train/Inertial Signals/total_acc_x_train.txt':
# # The acceleration signal from the smartphone accelerometer X axis in standard
# # gravity units 'g'. Every row shows a 128 element vector.
# # The same description applies for the 'total_acc_y_train.txt'
# # and 'total_acc_z_train.txt' files for the Y and Z axis.
#
# # 'train/Inertial Signals/body_acc_x_train.txt':
# # The body acceleration signal obtained by subtracting the gravity from the
# # total acceleration.
#
# # 'train/Inertial Signals/body_gyro_x_train.txt':
# # The angular velocity vector measured by the gyroscope for each window sample.
# # The units are radians/second.
#
# testInertialSignalsfilelist<-list.files(pattern="*.txt")
# intertialdata<-read.table(testInertialSignalsfilelist[7])
#
# setwd("..")
# setwd("..")
# setwd("train/Inertial Signals")
#
# trainInertialSignalsfilelist<-list.files(pattern="*.txt")
#
# setwd("..")
# setwd("..")
?object.size
detach("package:graphics", unload=TRUE)
detach("package:grDevices", unload=TRUE)
detach("package:utils", unload=TRUE)
library(utils)
# Title: Course Project for Coursera Getting and Cleaning Data
# Brief description:
# Author: jbkellner
# Date created: May 14, 2014
# Last modified: May 14, 2014
# Dependencies: This script assumes the data to be processed is in a folder
# called UCI HAR Dataset located in the current working directory
# if the folder is missing, it will be downloaded from the web.
library(utils)
# stats datasets graphics grDevices
# STEP 1: Read in the focal data into the R global environment
# Check that the data folder exists and set as the working directory, stop if it is missing
if(!file.exists("UCI HAR Dataset")){
url<-"https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
print("The data folder UCI HAR Dataset is missing, it can be downloaded from the web at:")
print(url)
rm(url)
#download.file(url,destfile="Dataset.zip",method="curl")
#unzip("as.character(getdata-projectfiles-UCI HAR Dataset.zip)",list=TRUE)
} else
{
print("The data folder UCI HAR Dataset was located, construction of a tidy dataset will proceed.")
setwd("UCI HAR Dataset")
}
# activity_labels link the class labels with their activity name
activitylabels<-read.table("activity_labels.txt")
activitylabels<-as.matrix(activitylabels)
activitylabels[,1]<-as.numeric(activitylabels[,1])
activitylabels[,2]<-tolower(activitylabels[,2])
# features.txt is a list of all features
# remove characters such as minus(replace with understore), comma, periods, parentheses
features<-read.table("features.txt")
features[,2]<-gsub("-","_",features[,2])
features[,2]<-gsub(",","",features[,2])
features[,2]<-gsub("\\(","",features[,2])
features[,2]<-gsub("\\)","",features[,2])
features[,2]<-gsub(".","_",features[,2])
features[,2]<-tolower(features[,2])
# Import data from both the test and train sets
# data for 30% of the volunteers is in the test folder
# data for 70% of the volunteers is in the train folder
# subject: each row identifies the subject who performed the activity
# from each window sample, ranges from 1:30
testsubject<-read.table("test/subject_test.txt")
trainsubject<-read.table("train/subject_train.txt")
# X is a 561-feature vector with time and frequency domain variables
testx<-read.table("test/X_test.txt")
trainx<-read.table("train/X_train.txt")
# y: the activity label for x
testy<-read.table("test/y_test.txt")
trainy<-read.table("train/y_train.txt")
# Return to the main directory
setwd("..")
# STEP 2: Merge the files from the test and train sets
# and make a master data.frame called tidydata
# export tidydata as a text file called tidydata.txt
# subject, identifies the subject who performed the activity
subject<-rbind(testsubject,trainsubject)
names(subject)<-"subject"
# x, a 561-feature vector with time and frequency domain variables
x<-rbind(testx,trainx)
names(x)<-features[,2] # get the column names from the feature file
# y, activity label for x
y<-rbind(testy,trainy)
names(y)<-"activity"
y$activity<-factor(y$activity,levels=activitylabels[,1],labels=activitylabels[,2])
# remove combined files
rm(testsubject,trainsubject)
rm(testx,trainx)
rm(testy,trainy)
# Create a master tidy data set called tidy data
# and export this as a tab delimited file called tidydata.txt
tidydata<-cbind(subject,y,x)
write.table(tidydata,"tidydata.txt",sep="\t")
rm(x,y,subject,activitylabels)
# STEP 3: Extract only the mean and standard deviation of the measurements
# There are a total of 17 measurements in the features file
# that have been described using numerous statistics.
# We are interested in extracting the mean and standard deviation of these measurements
# described as mean() and std()
featuresmeanall<-grep("_mean",features[,2]) # features that calculate the mean
featuresmeanFreq<-grep("_meanFreq",features[,2]) # features that calculate the meanFreq
featuresmean<-as.numeric(row.names(table(featuresmeanall,exclude=featuresmeanFreq))) # remove meanFreq features
featuresstd<-grep("_std",features[,2]) # features that calculate the std
featuresmeanstd<-sort(c(featuresmean,featuresstd)) # combine mean and std into one list
rm(featuresmeanall,featuresmeanFreq,featuresmean,featuresstd)
tidydataMeanStd<-tidydata[,c(1:2,(2+featuresmeanstd))] # 2 is added as the measurements started in column 3
write.table(tidydataMeanStd,"tidydataMeanStd.txt",sep="\t")
setwd("~/Dropbox/R/3GettingCleaningData/CourseProject")
library(utils)
# stats datasets graphics grDevices
# STEP 1: Read in the focal data into the R global environment
# Check that the data folder exists and set as the working directory, stop if it is missing
if(!file.exists("UCI HAR Dataset")){
url<-"https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
print("The data folder UCI HAR Dataset is missing, it can be downloaded from the web at:")
print(url)
rm(url)
#download.file(url,destfile="Dataset.zip",method="curl")
#unzip("as.character(getdata-projectfiles-UCI HAR Dataset.zip)",list=TRUE)
} else
{
print("The data folder UCI HAR Dataset was located, construction of a tidy dataset will proceed.")
setwd("UCI HAR Dataset")
}
# activity_labels link the class labels with their activity name
activitylabels<-read.table("activity_labels.txt")
activitylabels<-as.matrix(activitylabels)
activitylabels[,1]<-as.numeric(activitylabels[,1])
activitylabels[,2]<-tolower(activitylabels[,2])
# features.txt is a list of all features
# remove characters such as minus(replace with understore), comma, periods, parentheses
features<-read.table("features.txt")
features[,2]<-gsub("-","_",features[,2])
features[,2]<-gsub(",","",features[,2])
features[,2]<-gsub("\\(","",features[,2])
features[,2]<-gsub("\\)","",features[,2])
features[,2]<-gsub(".","_",features[,2])
features[,2]<-tolower(features[,2])
# Import data from both the test and train sets
# data for 30% of the volunteers is in the test folder
# data for 70% of the volunteers is in the train folder
# subject: each row identifies the subject who performed the activity
# from each window sample, ranges from 1:30
testsubject<-read.table("test/subject_test.txt")
trainsubject<-read.table("train/subject_train.txt")
# X is a 561-feature vector with time and frequency domain variables
testx<-read.table("test/X_test.txt")
trainx<-read.table("train/X_train.txt")
# y: the activity label for x
testy<-read.table("test/y_test.txt")
trainy<-read.table("train/y_train.txt")
# Return to the main directory
setwd("..")
library("stats", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library(utils,stats)
# stats datasets graphics grDevices
# STEP 1: Read in the focal data into the R global environment
# Check that the data folder exists and set as the working directory, stop if it is missing
if(!file.exists("UCI HAR Dataset")){
url<-"https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
print("The data folder UCI HAR Dataset is missing, it can be downloaded from the web at:")
print(url)
rm(url)
#download.file(url,destfile="Dataset.zip",method="curl")
#unzip("as.character(getdata-projectfiles-UCI HAR Dataset.zip)",list=TRUE)
} else
{
print("The data folder UCI HAR Dataset was located, construction of a tidy dataset will proceed.")
setwd("UCI HAR Dataset")
}
# activity_labels link the class labels with their activity name
activitylabels<-read.table("activity_labels.txt")
activitylabels<-as.matrix(activitylabels)
activitylabels[,1]<-as.numeric(activitylabels[,1])
activitylabels[,2]<-tolower(activitylabels[,2])
# features.txt is a list of all features
# remove characters such as minus(replace with understore), comma, periods, parentheses
features<-read.table("features.txt")
features[,2]<-gsub("-","_",features[,2])
features[,2]<-gsub(",","",features[,2])
features[,2]<-gsub("\\(","",features[,2])
features[,2]<-gsub("\\)","",features[,2])
features[,2]<-gsub(".","_",features[,2])
features[,2]<-tolower(features[,2])
# Import data from both the test and train sets
# data for 30% of the volunteers is in the test folder
# data for 70% of the volunteers is in the train folder
# subject: each row identifies the subject who performed the activity
# from each window sample, ranges from 1:30
testsubject<-read.table("test/subject_test.txt")
trainsubject<-read.table("train/subject_train.txt")
# X is a 561-feature vector with time and frequency domain variables
testx<-read.table("test/X_test.txt")
trainx<-read.table("train/X_train.txt")
# y: the activity label for x
testy<-read.table("test/y_test.txt")
trainy<-read.table("train/y_train.txt")
# Return to the main directory
setwd("..")
setwd("~/Dropbox/R/3GettingCleaningData/CourseProject")
?read.table
?as.numeric
?tolower
?gsub
setwd("UCI HAR Dataset")
activitylabels<-read.table("activity_labels.txt")
activitylabels<-as.matrix(activitylabels)
activitylabels[,1]<-as.numeric(activitylabels[,1])
activitylabels[,2]<-tolower(activitylabels[,2])
activitylabels<-read.table("activity_labels.txt")
?read.table
library("datasets", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("graphics", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("grDevices", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
# activity_labels link the class labels with their activity name
activitylabels<-read.table("activity_labels.txt")
activitylabels<-as.matrix(activitylabels)
activitylabels[,1]<-as.numeric(activitylabels[,1])
activitylabels[,2]<-tolower(activitylabels[,2])
